// src/lib/plugins/django.ts
import { LanguagePlugin } from '@/types/plugin';
import { ProjectSettings } from '@/types/project';

export default {
  id: 'django',
  name: 'Django',
  description: 'Python web framework with batteries included',
  version: '1.0.0',
  category: 'fullstack',
  extensions: ['.py', '.html'],
  configFiles: ['requirements.txt', 'settings.py', 'urls.py'],
  
  sampleTree: `my-django-app/
├── manage.py
├── requirements.txt
├── myproject/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── myapp/
│   ├── __init__.py
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   └── templates/
│       └── myapp/
│           └── index.html
└── static/
    ├── css/
    ├── js/
    └── images/`,
    
  generateContent: (filename: string, settings: ProjectSettings) => {
    if (filename === 'settings.py') {
      return generateDjangoSettings(settings);
    }
    if (filename === 'models.py') {
      return generateDjangoModels(settings);
    }
    // Generic Python file content
    return `# ${filename}\n# Django module\n`;
  },
  
  dependencies: {
    runtime: ['django>=4.2.0'],
    devDependencies: ['pytest-django']
  },

  metadata: {
    author: 'File Tree Generator',
    documentation: 'https://docs.djangoproject.com/',
    tags: ['python', 'web', 'orm'],
    difficulty: 'intermediate'
  }
} as LanguagePlugin;

function generateDjangoSettings(settings: ProjectSettings): string {
  return `"""
Django settings for ${settings.name || 'project'} project.
Generated by File Tree Generator.
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-change-this-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '${settings.name || 'myproject'}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '${settings.name || 'myproject'}.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
`;
}

function generateDjangoModels(settings: ProjectSettings): string {
  return `"""
Models for ${settings.name || 'project'}.
"""

from django.db import models
from django.contrib.auth.models import User

class BaseModel(models.Model):
    """Base model with common fields."""
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

class Profile(BaseModel):
    """User profile model."""
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(max_length=500, blank=True)
    location = models.CharField(max_length=30, blank=True)
    birth_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.user.username}'s profile"
`;
}
